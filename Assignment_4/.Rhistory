(CIsIWN <- var(wr[ ,"IWN"]) * 453 / c(qchisq(c(0.975,0.025), df=453)))
(CIsSPY <- var(wr[ ,"SPY"]) * 453 / c(qchisq(c(0.975,0.025), df=453)))
tab <- cbind(rbind(CImAGG, CImVAW, CImIWN, CImSPY),
rbind(CIsAGG, CIsVAW, CIsIWN, CIsSPY))
rownames(tab) <- c("AGG","VAW","IWN","SPY")
colnames(tab) <- c("lower CI.m","upper CI.m","lower CI.s^2",
"upper CI.s^2")
tab
print(xtable(tab,type="latex",auto=TRUE))
##################
#h)
set.seed(3285913)
k <- 10000
simsamplesAGG<-replicate(k,sample(wr[ ,"AGG"], replace=TRUE))
simmeansAGG<-apply(simsamplesAGG,2,mean)
simvarsAGG<-apply(simsamplesAGG,2,var)
(CImAGGboot <- quantile(simmeansAGG, c(0.025,0.975)))
(CIsAGGboot <- quantile(simvarsAGG, c(0.025,0.975)))
simsamplesVAW<-replicate(k,sample(wr[ ,"VAW"], replace=TRUE))
simmeansVAW<-apply(simsamplesVAW,2,mean)
simvarsVAW<-apply(simsamplesVAW,2,var)
CImVAWboot <- quantile(simmeansVAW, c(0.025,0.975))
CIsVAWboot <- quantile(simvarsVAW, c(0.025,0.975))
simsamplesIWN<-replicate(k,sample(wr[ ,"IWN"], replace=TRUE))
simmeansIWN<-apply(simsamplesIWN,2,mean)
simvarsIWN <-apply(simsamplesIWN,2,var)
CImIWNboot <- quantile(simmeansIWN, c(0.025,0.975))
CIsIWNboot <- quantile(simvarsIWN, c(0.025,0.975))
simsamplesSPY<-replicate(k,sample(wr[ ,"SPY"], replace=TRUE))
simmeansSPY<-apply(simsamplesSPY,2,mean)
simvarsSPY<-apply(simsamplesSPY,2,var)
CImSPYboot <- quantile(simmeansSPY, c(0.025,0.975))
CIsSPYboot <- quantile(simvarsSPY, c(0.025,0.975))
tab <- cbind(rbind(CImAGGboot, CImVAWboot, CImIWNboot, CImSPYboot),
rbind(CIsAGGboot, CIsVAWboot, CIsIWNboot, CIsSPYboot))
rownames(tab) <- c("AGG","VAW","IWN","SPY")
colnames(tab) <- c("lower CI.m","upper CI.m","lower CI.s^2",
"upper CI.s^2")
tab
print(xtable(tab,type="latex",auto=TRUE))
################
#i)
(t.obs <- mean(wr[ ,"AGG"]) / (sd(wr[ ,"AGG"])/sqrt(454) ))
2*(1-pt(abs(t.obs),df=453))
t.test(wr[ ,"AGG"])
qt(0.975,df=453)
t <- apply(wr[ ,c("AGG","VAW","IWN","SPY")],2,mean)/
apply(wr[ ,c("AGG","VAW","IWN","SPY")],2,sd)*sqrt(453)
df <- rep(453,4)
p <- 2*(1-pt(abs(t),df=453))
tab <- cbind(t,df,p)
rownames(tab) <- c("AGG","VAW","IWN","SPY")
colnames(tab) <- c("t.obs","df","P(T>|t.obs|)")
tab
print(xtable(tab,type="latex",auto=TRUE))
t.test(wr[ ,"AGG"],wr[ ,"VAW"])
################################
#j)
#v1 <- var(wr$AGG) ; v2 <- var(wr$VAW)
#m1 <- mean(wr$AGG) ; m2 <- mean(wr$VAW)
#n <- 454
#tobs <- ((m1-m2)-0)/sqrt((v1/n)+(v2/n))
## j)
## Sample size:
n <- 454
## Variances for AGG & VAW:
v1 <- var(wr$AGG); v2 <- var(wr$VAW)
## Mean for AGG & VAW:
m1 <- mean(wr$AGG); m2 <- mean(wr$VAW)
## Calculating t_obs_
t_obs_ <- abs((m1-m2)/sqrt(v1/n+v2/n))
## Calculating degree of freedom using formula 3.50:
v <- (v1/n+v2/n)^2 / ((v1/n)^2/(n-1)+(v2/n)^2/(n-1))
## Calculating p-value:
2*(1-pt(t_obs_,v))
##############################
#k)
################################
##
## Indlæs data
etfSum_analyse <- read.table("finans2_data.csv",header=TRUE, sep=";")
str(etfSum_analyse)
##
## ################################
## ## k)
## ## Bestem den empiriske korrelation for de udvalgte variable og
## ## undersøg afhængighed
## cor(etfSum_analyse[,2:7], use="everything", method="pearson")
##
## ##  Først trimmes pladsen rundt om selve plottet. Se mere på ?par
## par(mar=c(3,3,2,1),mgp=c(2,0.7,0))
## par(mfrow=c(1,1))
## plot(etfSum_analyse$Volatility, etfSum_analyse$CVaR, pch=16, cex=0.7,
##      xlab="Volatilitet [Ugentligt Pct.]",
##      ylab="Conditional Value at Risk [Ugentligt Pct.]",  cex.lab=0.8,
##      main="Sammenhæng mellem Volatilitet og CVaR", cex.main=0.8)
##
## ## Delvis håndholdte beregninger af correlationen mellem Geo.mean og maxTuW
## ## k)
## cov(etfSum_analyse$Geo.mean,etfSum_analyse$maxTuW)
## var(etfSum_analyse$Geo.mean)
## var(etfSum_analyse$maxTuW)
etfSum_analyse <- read.table("../finans2_data.csv",header=TRUE, sep=";")
attach(etfSum_analyse)
par(mar=c(3,3,2,1),mgp=c(2,0.7,0))
par(mfrow=c(2,2))
plot(Volatility, CVaR, pch=16, cex=0.7,cex.main=0.8)
plot(Geo.mean, maxTuW, pch=16, cex=0.7,cex.main=0.8)
plot(Volatility, maxDD, pch=16, cex=0.7,cex.main=0.8)
plot(maxTuW, Volatility, pch=16, cex=0.7,cex.main=0.8)
round(cor(etfSum_analyse[,-1]),digits=2)
c(cov(etfSum_analyse[,"Geo.mean"],etfSum_analyse[,"maxTuW"]),
sd(etfSum_analyse[,"Geo.mean"]), sd(etfSum_analyse[,"maxTuW"]))
#1.18
a <- cov(etfSum_analyse$Geo.mean,etfSum_analyse$maxTuW)
#-4.963493
b <- sd(etfSum_analyse$Geo.mean) #0.08086725
c <- sd(etfSum_analyse$maxTuW) #91.8358
a/(b*c) #-0.668348
cor(etfSum_analyse$Geo.mean,etfSum_analyse$maxTuW) #-0.668348
#tabel over korrelationer
d <- round(cor(etfSum_analyse[,-1]),digits=2)
print(xtable(d,type="latex",auto=TRUE))
qchisq(0.975,454-1)
qchisq(0.025, 454-1)
#Load data
dat <- read.csv("A4_Kulhuse.csv")
str(dat)
#    Battery, Chl, DateTime, Depth, ODO, ODOsat, pH, Sal, Temp
attach(dat)
#Missing
sum(is.na(DateTime))
sum(is.na(ODO))
Days <- seq(from = 10/24, by = 1/48, length.out = 5000) # Days from start (2017-08-24 10:00:00)
plot(Days,ODO,type='l')
A <- matrix(c(1))
B <- matrix(c(0))
C <- matrix(c(1))
Sigma1 <- matrix(c(0.01)) #System variance
Sigma2 <- matrix(c(0.005)) #Observation variance
#Question 4.3 Pure filter.
source("kalman_new.R")
kalman43 <- kalman(Sal,A=A,B=B,u=NULL,C=C,Sigma.1=Sigma1,Sigma.2=Sigma2,debug=FALSE,V0=Sigma1,Xhat0=Sal[1],n.ahead=1,skip=0,verbose=TRUE)
setwd("~/Documents/5. DTU noter/Semester 6/02417_Time_Series_Analysis/Time_Series_2023/Assignment_4")
#Question 4.3 Pure filter.
source("kalman_new.R")
kalman43 <- kalman(Sal,A=A,B=B,u=NULL,C=C,Sigma.1=Sigma1,Sigma.2=Sigma2,debug=FALSE,V0=Sigma1,Xhat0=Sal[1],n.ahead=1,skip=0,verbose=TRUE)
kalman43 <- kalman(Sal,A=A,B=B,u=NULL,C=C,Sigma.1=Sigma1,Sigma.2=Sigma2,debug=FALSE,V0=Sigma1,Xhat0=Sal[1],n.ahead=1,skip=0,verbose=TRUE)
setwd("~/Documents/5. DTU noter/Semester 6/02417_Time_Series_Analysis/Time_Series_2023/Assignment_4")
get(wd)
getwd()
#Question 4.3 Pure filter.
source("kalman_new.R")
kalman43 <- kalman(Sal,A=A,B=B,u=NULL,C=C,Sigma.1=Sigma1,Sigma.2=Sigma2,debug=FALSE,V0=Sigma1,Xhat0=Sal[1],n.ahead=1,skip=0,verbose=TRUE)
#Question 4.3 Pure filter.
source("kalman_new.R")
kalman43 <- kalman2(Sal,A=A,B=B,u=NULL,C=C,Sigma.1=Sigma1,Sigma.2=Sigma2,debug=FALSE,V0=Sigma1,Xhat0=Sal[1],n.ahead=1,skip=0,verbose=TRUE)
kalman43 <- kalman2(Sal,A=A,B=B,u=NULL,C=C,Sigma.1=Sigma1,Sigma.2=Sigma2,debug=FALSE,V0=Sigma1,Xhat0=Sal[1],n.ahead=1,skip=0,verbose=TRUE)
#Load data
dat <- read.csv("A4_Kulhuse.csv")
str(dat)
#    Battery, Chl, DateTime, Depth, ODO, ODOsat, pH, Sal, Temp
attach(dat)
#Missing
sum(is.na(DateTime))
sum(is.na(ODO))
Days <- seq(from = 10/24, by = 1/48, length.out = 5000) # Days from start (2017-08-24 10:00:00)
plot(Days,ODO,type='l')
A <- matrix(c(1))
B <- matrix(c(0))
C <- matrix(c(1))
Sigma1 <- matrix(c(0.01)) #System variance
Sigma2 <- matrix(c(0.005)) #Observation variance
plot(Days,ODO,type='l')
plot(Days,ODO,type='l')
plot(Days,Sal,type='l')
Days <- seq(from = 10/24, by = 1/48, length.out = 5000) # Days from start (2017-08-24 10:00:00)
plot(Days,Sal,type='l')
A <- matrix(c(1))
B <- matrix(c(0))
C <- matrix(c(1))
Sigma1 <- matrix(c(0.01)) #System variance
Sigma2 <- matrix(c(0.005)) #Observation variance
#Question 4.3 Pure filter.
source("kalman_new.R")
kalman43 <- kalman2(Sal,A=A,B=B,u=NULL,C=C,Sigma.1=Sigma1,Sigma.2=Sigma2,debug=FALSE,V0=Sigma1,Xhat0=Sal[1],n.ahead=1,skip=0,verbose=TRUE)
plot(Days,Sal,type="p",,col="red",xlab="Time (day)",ylab="Water Salinity [PSU] = [g/kg]")
matlines(kalman43$pred[,1]+sqrt(kalman43$Sigma.yy.pred[1,1,])%*%cbind(0,-1.96,1.96),col="seagreen",lty=c(1,2,2), lwd=1)
legend("topright",legend=c("Observations","1-step prediciions"),col=c("tomato","seagreen"),pch=c(20,NA),bty='n',lty=c(NA,1))
legend("bottomright",legend=c("Observations","1-step prediciions"),col=c("tomato","seagreen"),pch=c(20,NA),bty='n',lty=c(NA,1))
kalman43 <- kalman2(Sal,A=A,B=B,u=NULL,C=C,Sigma.1=Sigma1,Sigma.2=Sigma2,debug=FALSE,V0=Sigma1,Xhat0=Sal[1],n.ahead=1,skip=0,verbose=TRUE)
plot(Days,Sal,type="p",,col="red",xlab="Time (day)",ylab="Water Salinity [PSU] = [g/kg]")
matlines(kalman43$pred[,1]+sqrt(kalman43$Sigma.yy.pred[1,1,])%*%cbind(0,-1.96,1.96),col="seagreen",lty=c(1,2,2), lwd=1)
legend("bottomright",legend=c("Observations","1-step prediciions"),col=c("tomato","seagreen"),pch=c(20,NA),bty='n',lty=c(NA,1))
plot(Days,Sal,type='l')
kalman43 <- kalman2(Sal,A=A,B=B,u=NULL,C=C,Sigma.1=Sigma1,Sigma.2=Sigma2,debug=FALSE,V0=Sigma1,Xhat0=Sal[1],n.ahead=1,skip=0,verbose=TRUE)
plot(Days,Sal,type="p",,col="red",xlab="Time (day)",ylab="Water Salinity [PSU] = [g/kg]")
matlines(kalman43$pred[,1]+sqrt(kalman43$Sigma.yy.pred[1,1,])%*%cbind(0,-1.96,1.96),col="seagreen",lty=c(1,2,2), lwd=1)
kalman43$pred[,1]
kalman43$pred[,2]
kalman43$pred[,1]
kalman43$pred[,1]-Sal
kalman43$pred[,1]-Sal[2:5000]
kalman43$pred[,1]-Sal[2:5000]
#2. Plot the standardized one step prediction errors. (Prediction errors normalized with the standard error of the prediction.)
length(kalman43)
#2. Plot the standardized one step prediction errors. (Prediction errors normalized with the standard error of the prediction.)
length(kalman43$pred)
#2. Plot the standardized one step prediction errors. (Prediction errors normalized with the standard error of the prediction.)
length(kalman43$pred[,1])
kalman43$pred[,1:5000]-Sal[2:5000]
kalman43$pred[,1:5000]-Sal[1:5000]
kalman43$pred[1:5000,1]-Sal[1:5000]
str(kalman43)
errors_norm <- na.omit((kalman43$pred[1:5000,1]-Sal[1:5000]) / kalman43$Sigma.yy.pred )
errors_norm <- na.omit((kalman43$pred[1:5000,1]-Sal[1:5000]) / kalman43$Sigma.yy.pred )
errors_norm <- na.omit((kalman43$pred[1:5000,1]-Sal[1:5000]) / kalman43$Sigma.yy.pred[1:5000] )
plot(errors_norm)
plot(errors_norm,ylab="Errors normalized")
plot(days,errors_norm,ylab="Errors normalized")
plot(Days,errors_norm,ylab="Errors normalized")
plot(errors_norm,ylab="Errors normalized")
plot(errors_norm,ylab="Errors normalized",type='l')
errors_norm <- na.omit((kalman43$pred[1:5000,1]-Sal[1:5000]) / sqrt(kalman43$Sigma.yy.pred[1:5000]) )
plot(errors_norm,ylab="Errors normalized",type='l')
#3. Plot for 800-950
plot(Days[800:950],Sal[800:950],type="p",,col="red",xlab="Time (day)",ylab="Water Salinity [PSU] = [g/kg]")
matlines(kalman43$pred[800:950,1]+sqrt(kalman43$Sigma.yy.pred[1,1,800:950])%*%cbind(0,-1.96,1.96),col="seagreen",lty=c(1,2,2), lwd=1)
legend("bottomright",legend=c("Observations","1-step prediciions"),col=c("tomato","seagreen"),pch=c(20,NA),bty='n',lty=c(NA,1))
errors_norm <- na.omit((kalman43$pred[800:950,1]-Sal[800:950]) / sqrt(kalman43$Sigma.yy.pred[800:950]) )
plot(errors_norm,ylab="Errors normalized",type='l')
#Question 4.3 Pure filter.
source("kalman_new.R")
kalman43 <- kalman2(Sal,A=A,B=B,u=NULL,C=C,Sigma.1=Sigma1,Sigma.2=Sigma2,debug=FALSE,V0=Sigma1,Xhat0=Sal[1],n.ahead=1,skip=0,verbose=TRUE)
#1. Plot prediction along the data include 95% PI.
plot(Days,Sal,type="p",,col="red",xlab="Time (day)",ylab="Water Salinity [PSU] = [g/kg]")
matlines(kalman43$pred[,1]+sqrt(kalman43$Sigma.yy.pred[1,1,])%*%cbind(0,-1.96,1.96),col="seagreen",lty=c(1,2,2), lwd=1)
legend("bottomright",legend=c("Observations","1-step prediciions"),col=c("tomato","seagreen"),pch=c(20,NA),bty='n',lty=c(NA,1))
#2. Plot the standardized one step prediction errors. (Prediction errors normalized with the standard error of the prediction.)
length(kalman43$pred)
errors_norm <- na.omit((kalman43$pred[1:5000,1]-Sal[1:5000]) / sqrt(kalman43$Sigma.yy.pred[1:5000]) )
plot(errors_norm,ylab="Errors normalized",type='l')
#3. Plot for 800-950
plot(Days[800:950],Sal[800:950],type="p",,col="red",xlab="Time (day)",ylab="Water Salinity [PSU] = [g/kg]")
matlines(kalman43$pred[800:950,1]+sqrt(kalman43$Sigma.yy.pred[1,1,800:950])%*%cbind(0,-1.96,1.96),col="seagreen",lty=c(1,2,2), lwd=1)
#3. Plot for 800-950
plot(Days[500:950],Sal[500:950],type="p",,col="red",xlab="Time (day)",ylab="Water Salinity [PSU] = [g/kg]")
matlines(kalman43$pred[500:950,1]+sqrt(kalman43$Sigma.yy.pred[1,1,800:950])%*%cbind(0,-1.96,1.96),col="seagreen",lty=c(1,2,2), lwd=1)
#3. Plot for 800-950
plot(Days[300:950],Sal[300:950],type="p",,col="red",xlab="Time (day)",ylab="Water Salinity [PSU] = [g/kg]")
#3. Plot for 800-950
plot(Days[300:950],Sal[300:950],type="p",,col="red",xlab="Time (day)",ylab="Water Salinity [PSU] = [g/kg]")
matlines(kalman43$pred[300:950,1]+sqrt(kalman43$Sigma.yy.pred[1,1,300:950])%*%cbind(0,-1.96,1.96),col="seagreen",lty=c(1,2,2), lwd=1)
#3. Plot for 800-950
plot(Days[300:950],Sal[300:950],type="p",,col="red",xlab="Time (day)",ylab="Water Salinity [PSU] = [g/kg]")
#3. Plot for 800-950
plot(Days[300:950],Sal[300:950],type="p",,col="red",xlab="Time (day)",ylab="Water Salinity [PSU] = [g/kg]",ylim=c(15,24))
matlines(kalman43$pred[300:950,1]+sqrt(kalman43$Sigma.yy.pred[1,1,300:950])%*%cbind(0,-1.96,1.96),col="seagreen",lty=c(1,2,2), lwd=1)
legend("bottomright",legend=c("Observations","1-step prediciions"),col=c("tomato","seagreen"),pch=c(20,NA),bty='n',lty=c(NA,1))
#3. Plot for 800-950
plot(Days[300:950],Sal[300:950],type="p",,col="red",xlab="Time (day)",ylab="Water Salinity [PSU] = [g/kg]",ylim=c(15,24))
matlines(kalman43$pred[300:950,1]+sqrt(kalman43$Sigma.yy.pred[1,1,300:950])%*%cbind(0,-1.96,1.96),col="seagreen",lty=c(1,2,2), lwd=1)
legend("bottomright",legend=c("Observations","1-step prediciions"),col=c("tomato","seagreen"),pch=c(20,NA),bty='n',lty=c(NA,1))
#3. Plot for 800-950
plot(Days[500:950],Sal[500:950],type="p",,col="red",xlab="Time (day)",ylab="Water Salinity [PSU] = [g/kg]",ylim=c(15,24))
matlines(kalman43$pred[500:950,1]+sqrt(kalman43$Sigma.yy.pred[1,1,500:950])%*%cbind(0,-1.96,1.96),col="seagreen",lty=c(1,2,2), lwd=1)
legend("bottomright",legend=c("Observations","1-step prediciions"),col=c("tomato","seagreen"),pch=c(20,NA),bty='n',lty=c(NA,1))
#3. Plot for 800-950
plot(Days[800:950],Sal[800:950],type="p",,col="red",xlab="Time (day)",ylab="Water Salinity [PSU] = [g/kg]",ylim=c(15,24))
matlines(kalman43$pred[800:950,1]+sqrt(kalman43$Sigma.yy.pred[1,1,800:950])%*%cbind(0,-1.96,1.96),col="seagreen",lty=c(1,2,2), lwd=1)
legend("bottomright",legend=c("Observations","1-step prediciions"),col=c("tomato","seagreen"),pch=c(20,NA),bty='n',lty=c(NA,1))
#3. Plot for 800-950
plot(Days[700:950],Sal[700:950],type="p",,col="red",xlab="Time (day)",ylab="Water Salinity [PSU] = [g/kg]",ylim=c(15,24))
matlines(kalman43$pred[700:950,1]+sqrt(kalman43$Sigma.yy.pred[1,1,700:950])%*%cbind(0,-1.96,1.96),col="seagreen",lty=c(1,2,2), lwd=1)
legend("bottomright",legend=c("Observations","1-step prediciions"),col=c("tomato","seagreen"),pch=c(20,NA),bty='n',lty=c(NA,1))
#3. Plot for 800-950
plot(Days[750:950],Sal[750:950],type="p",,col="red",xlab="Time (day)",ylab="Water Salinity [PSU] = [g/kg]",ylim=c(15,24))
matlines(kalman43$pred[750:950,1]+sqrt(kalman43$Sigma.yy.pred[1,1,750:950])%*%cbind(0,-1.96,1.96),col="seagreen",lty=c(1,2,2), lwd=1)
#3. Plot for 800-950
plot(Days[800:950],Sal[800:950],type="p",,col="red",xlab="Time (day)",ylab="Water Salinity [PSU] = [g/kg]",ylim=c(15,24))
matlines(kalman43$pred[750:950,1]+sqrt(kalman43$Sigma.yy.pred[1,1,750:950])%*%cbind(0,-1.96,1.96),col="seagreen",lty=c(1,2,2), lwd=1)
#3. Plot for 800-950
plot(Days[800:950],Sal[800:950],type="p",,col="red",xlab="Time (day)",ylab="Water Salinity [PSU] = [g/kg]",ylim=c(15,24))
matlines(kalman43$pred[800:950,1]+sqrt(kalman43$Sigma.yy.pred[1,1,800:950])%*%cbind(0,-1.96,1.96),col="seagreen",lty=c(1,2,2), lwd=1)
matlines(kalman43$pred[750:950,1]+sqrt(kalman43$Sigma.yy.pred[1,1,750:950])%*%cbind(0,-1.96,1.96),col="seagreen",lty=c(1,2,2), lwd=1)
kalman43$pred[750:950,1]
kalman43$pred[800:950,1]
#3. Plot for 800-950
plot(Days[800:950],Sal[800:950],type="p",,col="red",xlab="Time (day)",ylab="Water Salinity [PSU] = [g/kg]",ylim=c(15,24))
matlines(kalman43$pred[800:950,1]+sqrt(kalman43$Sigma.yy.pred[1,1,800:950])%*%cbind(0,-1.96,1.96),col="seagreen",lty=c(1,2,2), lwd=1)
matlines(kalman43$pred[750:950,1]+sqrt(kalman43$Sigma.yy.pred[1,1,750:950])%*%cbind(0,-1.96,1.96),col="seagreen",lty=c(1,2,2), lwd=1)
matlines(kalman43$pred[800:950,1]+sqrt(kalman43$Sigma.yy.pred[1,1,800:950])%*%cbind(0,-1.96,1.96),col="seagreen",lty=c(1,2,2), lwd=1)
matlines(kalman43$pred[750:950,1]+sqrt(kalman43$Sigma.yy.pred[1,1,750:950])%*%cbind(0,-1.96,1.96),col="seagreen",lty=c(1,2,2), lwd=1)
matlines(kalman43$pred[800:950,1]+sqrt(kalman43$Sigma.yy.pred[1,1,800:950])%*%cbind(0,-1.96,1.96),col="seagreen",lty=c(1,2,2), lwd=1)
matlines(kalman43$pred[750:950,1]+sqrt(kalman43$Sigma.yy.pred[1,1,750:950])%*%cbind(0,-1.96,1.96),col="seagreen",lty=c(1,2,2), lwd=1)
#3. Plot for 800-950
plot(Days[800:950],Sal[800:950],type="p",,col="red",xlab="Time (day)",ylab="Water Salinity [PSU] = [g/kg]",ylim=c(15,24))
#3. Plot for 800-950
plot(Sal[800:950],type="p",,col="red",xlab="Time (day)",ylab="Water Salinity [PSU] = [g/kg]",ylim=c(15,24))
matlines(kalman43$pred[800:950,1]+sqrt(kalman43$Sigma.yy.pred[1,1,800:950])%*%cbind(0,-1.96,1.96),col="seagreen",lty=c(1,2,2), lwd=1)
matlines(kalman43$pred[750:950,1]+sqrt(kalman43$Sigma.yy.pred[1,1,750:950])%*%cbind(0,-1.96,1.96),col="seagreen",lty=c(1,2,2), lwd=1)
#3. Plot for 800-950
plot(Days[800:950],Sal[800:950],type="p",,col="red",xlab="Time (day)",ylab="Water Salinity [PSU] = [g/kg]",ylim=c(15,24))
matlines(kalman43$pred[800:950,1]+sqrt(kalman43$Sigma.yy.pred[1,1,800:950])%*%cbind(0,-1.96,1.96),col="seagreen",lty=c(1,2,2), lwd=1)
matlines(kalman43$pred[750:950,1]+sqrt(kalman43$Sigma.yy.pred[1,1,750:950])%*%cbind(0,-1.96,1.96),col="seagreen",lty=c(1,2,2), lwd=1)
#3. Plot for 800-950
plot(Days[800:950],Sal[800:950],type="p",,col="red",xlab="Time (day)",ylab="Water Salinity [PSU] = [g/kg]",ylim=c(15,24),xlim=(0,30))
#3. Plot for 800-950
plot(Days[800:950],Sal[800:950],type="p",,col="red",xlab="Time (day)",ylab="Water Salinity [PSU] = [g/kg]",ylim=c(15,24),xlim=(0,30))
#3. Plot for 800-950
plot(Days[800:950],Sal[800:950],type="p",,col="red",xlab="Time (day)",ylab="Water Salinity [PSU] = [g/kg]",ylim=c(15,24),xlim=c(0,30))
matlines(kalman43$pred[800:950,1]+sqrt(kalman43$Sigma.yy.pred[1,1,800:950])%*%cbind(0,-1.96,1.96),col="seagreen",lty=c(1,2,2), lwd=1)
#3. Plot for 800-950
plot(Days[800:950],Sal[800:950],type="p",,col="red",xlab="Time (day)",ylab="Water Salinity [PSU] = [g/kg]",ylim=c(15,24),xlim=c(0,30))
matlines(kalman43$pred[800:950,1]+sqrt(kalman43$Sigma.yy.pred[1,1,800:950])%*%cbind(0,-1.96,1.96),col="seagreen",lty=c(1,2,2), lwd=1)
matlines(kalman43$pred[750:950,1]+sqrt(kalman43$Sigma.yy.pred[1,1,750:950])%*%cbind(0,-1.96,1.96),col="seagreen",lty=c(1,2,2), lwd=1)
#3. Plot for 800-950
plot(Days[800:950],Sal[800:950],type="p",,col="red",xlab="Time (day)",ylab="Water Salinity [PSU] = [g/kg]",ylim=c(15,24),xlim=c(0,30))
#3. Plot for 800-950
plot(800:950,Sal[800:950],type="p",,col="red",xlab="Time (day)",ylab="Water Salinity [PSU] = [g/kg]",ylim=c(15,24),xlim=c(0,30))
#3. Plot for 800-950
plot(800:950,Sal[800:950],type="p",,col="red",xlab="Time (day)",ylab="Water Salinity [PSU] = [g/kg]",ylim=c(15,24),xlim=c(0,30))
matlines(kalman43$pred[800:950,1]+sqrt(kalman43$Sigma.yy.pred[1,1,800:950])%*%cbind(0,-1.96,1.96),col="seagreen",lty=c(1,2,2), lwd=1)
matlines(kalman43$pred[750:950,1]+sqrt(kalman43$Sigma.yy.pred[1,1,750:950])%*%cbind(0,-1.96,1.96),col="seagreen",lty=c(1,2,2), lwd=1)
#3. Plot for 800-950
plot(800:950,Sal[800:950],type="p",,col="red",xlab="Time (day)",ylab="Water Salinity [PSU] = [g/kg]",ylim=c(15,24),xlim=c(800,950))
matlines(kalman43$pred[800:950,1]+sqrt(kalman43$Sigma.yy.pred[1,1,800:950])%*%cbind(0,-1.96,1.96),col="seagreen",lty=c(1,2,2), lwd=1)
matlines(kalman43$pred[750:950,1]+sqrt(kalman43$Sigma.yy.pred[1,1,750:950])%*%cbind(0,-1.96,1.96),col="seagreen",lty=c(1,2,2), lwd=1)
#3. Plot for 800-950
plot(800:950,Sal[800:950],type="p",,col="red",xlab="Time (day)",ylab="Water Salinity [PSU] = [g/kg]",ylim=c(15,24),xlim=c(800,950))
matlines(800:950,kalman43$pred[800:950,1]+sqrt(kalman43$Sigma.yy.pred[1,1,800:950])%*%cbind(0,-1.96,1.96),col="seagreen",lty=c(1,2,2), lwd=1)
matlines(800:950,kalman43$pred[750:950,1]+sqrt(kalman43$Sigma.yy.pred[1,1,750:950])%*%cbind(0,-1.96,1.96),col="seagreen",lty=c(1,2,2), lwd=1)
matlines(800:950,kalman43$pred[750:950,1]+sqrt(kalman43$Sigma.yy.pred[1,1,750:950])%*%cbind(0,-1.96,1.96),col="seagreen",lty=c(1,2,2), lwd=1)
#3. Plot for 800-950
plot(800:950,Sal[800:950],type="p",,col="red",xlab="Time (day)",ylab="Water Salinity [PSU] = [g/kg]",ylim=c(15,24),xlim=c(800,950))
matlines(800:950,kalman43$pred[800:950,1]+sqrt(kalman43$Sigma.yy.pred[1,1,800:950])%*%cbind(0,-1.96,1.96),col="seagreen",lty=c(1,2,2), lwd=1)
legend("bottomright",legend=c("Observations","1-step prediciions"),col=c("tomato","seagreen"),pch=c(20,NA),bty='n',lty=c(NA,1))
#3. Plot for 800-950
plot(800:950,Sal[800:950],type="p",,col="red",xlab="Index",ylab="Water Salinity [PSU] = [g/kg]",ylim=c(15,24),xlim=c(800,950))
matlines(800:950,kalman43$pred[800:950,1]+sqrt(kalman43$Sigma.yy.pred[1,1,800:950])%*%cbind(0,-1.96,1.96),col="seagreen",lty=c(1,2,2), lwd=1)
legend("bottomright",legend=c("Observations","1-step prediciions"),col=c("tomato","seagreen"),pch=c(20,NA),bty='n',lty=c(NA,1))
#3. Plot for 800-950
plot(800:950,Sal[800:950],type="p",,col="red",xlab="Index",ylab="Water Salinity [PSU] = [g/kg]",ylim=c(15,24),xlim=c(800,950))
matlines(800:950,kalman43$pred[800:950,1]+sqrt(kalman43$Sigma.yy.pred[1,1,800:950])%*%cbind(0,-1.96,1.96),col="seagreen",lty=c(1,2,2), lwd=1)
legend("bottomright",legend=c("Observations","1-step prediciions"),col=c("tomato","seagreen"),pch=c(20,NA),bty='n',lty=c(NA,1))
errors_norm <- na.omit((kalman43$pred[800:950,1]-Sal[800:950]) / sqrt(kalman43$Sigma.yy.pred[800:950]) )
plot(errors_norm,ylab="Errors normalized",type='l')
plot(800:950,errors_norm,ylab="Errors normalized",type='l')
plot(800:950,errors_norm,ylab="Errors normalized",type='l',xlab="Index")
errors_norm <- na.omit((kalman43$pred[800:950,1]-Sal[800:950]) / sqrt(kalman43$Sigma.yy.pred[800:950]) )
plot(800:950,errors_norm,ylab="Errors normalized",type='l',xlab="Index")
kalman43
kalman43
kalman43[5000,,]
kalman43[5000,1,1]
kalman43[5000,1]
kalman43[5000]
str(kalman43)
kalman43$Sigma.xx.rec[5000]
kalman43$Sigma.xx.rec[5000]
kalman43$Sigma.xx.rec[1,1,5000]
kalman43$rec[5000]
kalman43$pred[5000]
kalman43$K[5000]
kalman43$Sigma.xx.rec[1,1,5000]
kalman43$Sigma.yy.rec[5000]
kalman43$Sigma.xx.pred[5000]
kalman43$Sigma.yy.pred[5000]
data.table(kalman43)
dat <- data.frame(kalman43)
dat
dat[5000]
kalman43
kalman43[1,1,1]
kalman43[1,1]
kalman43[1]
kalman43[1,2]
kalman43[1,0]
kalman43[1,]
kalman43[,1]
kalman43[,,1]
kalman43[,,,1]
kalman43[, , ,1]
#1. Plot prediction along the data include 95% PI.
plot(Days,Sal,type="p",,col="red",xlab="Time (day)",ylab="Water Salinity [PSU] = [g/kg]")
matlines(kalman43$pred[,1]+sqrt(kalman43$Sigma.yy.pred[1,1,])%*%cbind(0,-1.96,1.96),col="seagreen",lty=c(1,2,2), lwd=1)
legend("bottomright",legend=c("Observations","1-step prediciions"),col=c("tomato","seagreen"),pch=c(20,NA),bty='n',lty=c(NA,1))
interval = c(1000:1300)
#3. Plot for 800-950
plot(interval,Sal[interval],type="p",,col="red",xlab="Index",ylab="Water Salinity [PSU] = [g/kg]",ylim=c(15,24),xlim=c(800,950))
matlines(interval,kalman43$pred[interval,1]+sqrt(kalman43$Sigma.yy.pred[1,1,interval])%*%cbind(0,-1.96,1.96),col="seagreen",lty=c(1,2,2), lwd=1)
legend("bottomright",legend=c("Observations","1-step prediciions"),col=c("tomato","seagreen"),pch=c(20,NA),bty='n',lty=c(NA,1))
Sal[interval]
#3. Plot for 800-950
plot(interval,Sal[interval],type="p",,col="red",xlab="Index",ylab="Water Salinity [PSU] = [g/kg]",ylim=c(15,24),xlim=c(800,950))
#3. Plot for 800-950
plot(interval,Sal[interval],type="p",,col="red",xlab="Index",ylab="Water Salinity [PSU] = [g/kg]",ylim=c(15,24),xlim=Sal[interval])
matlines(interval,kalman43$pred[interval,1]+sqrt(kalman43$Sigma.yy.pred[1,1,interval])%*%cbind(0,-1.96,1.96),col="seagreen",lty=c(1,2,2), lwd=1)
interval = c(1000:1300)
#3. Plot for 800-950
plot(interval,Sal[interval],type="p",,col="red",xlab="Index",ylab="Water Salinity [PSU] = [g/kg]",ylim=c(15,24),xlim=Sal[interval])
matlines(interval,kalman43$pred[interval,1]+sqrt(kalman43$Sigma.yy.pred[1,1,interval])%*%cbind(0,-1.96,1.96),col="seagreen",lty=c(1,2,2), lwd=1)
legend("bottomright",legend=c("Observations","1-step prediciions"),col=c("tomato","seagreen"),pch=c(20,NA),bty='n',lty=c(NA,1))
#3. Plot for 800-950
plot(interval,Sal[interval],type="p",,col="red",xlab="Index",ylab="Water Salinity [PSU] = [g/kg]",ylim=c(15,24))
matlines(interval,kalman43$pred[interval,1]+sqrt(kalman43$Sigma.yy.pred[1,1,interval])%*%cbind(0,-1.96,1.96),col="seagreen",lty=c(1,2,2), lwd=1)
legend("bottomright",legend=c("Observations","1-step prediciions"),col=c("tomato","seagreen"),pch=c(20,NA),bty='n',lty=c(NA,1))
#3. Plot for 800-950
plot(interval,Sal[interval],type="p",,col="red",xlab="Index",ylab="Water Salinity [PSU] = [g/kg]",ylim=c(15,24))
interval = c(1000:2000)
#3. Plot for 800-950
plot(interval,Sal[interval],type="p",,col="red",xlab="Index",ylab="Water Salinity [PSU] = [g/kg]",ylim=c(15,24))
matlines(interval,kalman43$pred[interval,1]+sqrt(kalman43$Sigma.yy.pred[1,1,interval])%*%cbind(0,-1.96,1.96),col="seagreen",lty=c(1,2,2), lwd=1)
legend("bottomright",legend=c("Observations","1-step prediciions"),col=c("tomato","seagreen"),pch=c(20,NA),bty='n',lty=c(NA,1))
#Question 4.3 Pure filter.
source("kalman.R")
#Question 4.3 Pure filter.
source("kalman(Rune).R")
kalman43 <- kalman2(Sal,A=A,B=B,u=NULL,C=C,Sigma.1=Sigma1,Sigma.2=Sigma2,debug=FALSE,V0=Sigma1,Xhat0=Sal[1],n.ahead=1,skip=0,verbose=TRUE)
#1. Plot prediction along the data include 95% PI.
plot(Days,Sal,type="p",,col="red",xlab="Time (day)",ylab="Water Salinity [PSU] = [g/kg]")
matlines(kalman43$pred[,1]+sqrt(kalman43$Sigma.yy.pred[1,1,])%*%cbind(0,-1.96,1.96),col="seagreen",lty=c(1,2,2), lwd=1)
legend("bottomright",legend=c("Observations","1-step prediciions"),col=c("tomato","seagreen"),pch=c(20,NA),bty='n',lty=c(NA,1))
#2. Plot the standardized one step prediction errors. (Prediction errors normalized with the standard error of the prediction.)
length(kalman43$pred)
errors_norm <- na.omit((kalman43$pred[1:5000,1]-Sal[1:5000]) / sqrt(kalman43$Sigma.yy.pred[1:5000]) )
plot(errors_norm,ylab="Errors normalized",type='l')
#Question 4.3 Pure filter.
source("kalman(Rune).R")
kalman43 <- kalman2(Sal,A=A,B=B,u=NULL,C=C,Sigma.1=Sigma1,Sigma.2=Sigma2,debug=FALSE,V0=Sigma1,Xhat0=Sal[1],n.ahead=1,skip=0,verbose=TRUE)
#1. Plot prediction along the data include 95% PI.
plot(Days,Sal,type="p",,col="red",xlab="Time (day)",ylab="Water Salinity [PSU] = [g/kg]")
matlines(kalman43$pred[,1]+sqrt(kalman43$Sigma.yy.pred[1,1,])%*%cbind(0,-1.96,1.96),col="seagreen",lty=c(1,2,2), lwd=1)
legend("bottomright",legend=c("Observations","1-step prediciions"),col=c("tomato","seagreen"),pch=c(20,NA),bty='n',lty=c(NA,1))
#2. Plot the standardized one step prediction errors. (Prediction errors normalized with the standard error of the prediction.)
length(kalman43$pred)
errors_norm <- na.omit((kalman43$pred[1:5000,1]-Sal[1:5000]) / sqrt(kalman43$Sigma.yy.pred[1:5000]) )
plot(errors_norm,ylab="Errors normalized",type='l')
interval = c(1000:2000)
#3. Plot for 800-950
plot(interval,Sal[interval],type="p",,col="red",xlab="Index",ylab="Water Salinity [PSU] = [g/kg]",ylim=c(15,24))
matlines(interval,kalman43$pred[interval,1]+sqrt(kalman43$Sigma.yy.pred[1,1,interval])%*%cbind(0,-1.96,1.96),col="seagreen",lty=c(1,2,2), lwd=1)
#Question 4.3 Pure filter.
source("kalman.R")
kalman43 <- kalman2(Sal,A=A,B=B,u=NULL,C=C,Sigma.1=Sigma1,Sigma.2=Sigma2,debug=FALSE,V0=Sigma1,Xhat0=Sal[1],n.ahead=1,skip=0,verbose=TRUE)
#1. Plot prediction along the data include 95% PI.
plot(Days,Sal,type="p",,col="red",xlab="Time (day)",ylab="Water Salinity [PSU] = [g/kg]")
matlines(kalman43$pred[,1]+sqrt(kalman43$Sigma.yy.pred[1,1,])%*%cbind(0,-1.96,1.96),col="seagreen",lty=c(1,2,2), lwd=1)
legend("bottomright",legend=c("Observations","1-step prediciions"),col=c("tomato","seagreen"),pch=c(20,NA),bty='n',lty=c(NA,1))
#2. Plot the standardized one step prediction errors. (Prediction errors normalized with the standard error of the prediction.)
length(kalman43$pred)
errors_norm <- na.omit((kalman43$pred[1:5000,1]-Sal[1:5000]) / sqrt(kalman43$Sigma.yy.pred[1:5000]) )
plot(errors_norm,ylab="Errors normalized",type='l')
interval = c(1000:2000)
#3. Plot for 800-950
plot(interval,Sal[interval],type="p",,col="red",xlab="Index",ylab="Water Salinity [PSU] = [g/kg]",ylim=c(15,24))
matlines(interval,kalman43$pred[interval,1]+sqrt(kalman43$Sigma.yy.pred[1,1,interval])%*%cbind(0,-1.96,1.96),col="seagreen",lty=c(1,2,2), lwd=1)
legend("bottomright",legend=c("Observations","1-step prediciions"),col=c("tomato","seagreen"),pch=c(20,NA),bty='n',lty=c(NA,1))
interval = c(1600:1700)
#3. Plot for 800-950
plot(interval,Sal[interval],type="p",,col="red",xlab="Index",ylab="Water Salinity [PSU] = [g/kg]",ylim=c(15,24))
matlines(interval,kalman43$pred[interval,1]+sqrt(kalman43$Sigma.yy.pred[1,1,interval])%*%cbind(0,-1.96,1.96),col="seagreen",lty=c(1,2,2), lwd=1)
interval = c(1550:1700)
#3. Plot for 800-950
plot(interval,Sal[interval],type="p",,col="red",xlab="Index",ylab="Water Salinity [PSU] = [g/kg]",ylim=c(15,24))
matlines(interval,kalman43$pred[interval,1]+sqrt(kalman43$Sigma.yy.pred[1,1,interval])%*%cbind(0,-1.96,1.96),col="seagreen",lty=c(1,2,2), lwd=1)
sqrt(kalman43$Sigma.yy.pred[1,1,interval])
Sigma.yy.pred
kalman43$Sigma.yy.pred
kalman43$Sigma.yy.pred[1,1,1]
kalman43$Sigma.yy.pred[1,1,2]
kalman43$Sigma.yy.pred[1,1,3]
kalman43$Sigma.yy.pred[1,1,100:200]
kalman43$Sigma.yy.pred[1,2,100:200]
kalman43$Sigma.yy.pred[2,2,100:200]
kalman43$Sigma.yy.pred[2,1,100:200]
kalman43$Sigma.yy.pred[1,1,100:200]
kalman43$Sigma.yy.pred[1,1,100:2000]
kalman43$Sigma.yy.pred[1,1,1000:2000]
#Question 4.3 Pure filter.
source("kalman.R")
kalman43 <- kalman2(Sal,A=A,B=B,u=NULL,C=C,Sigma.1=Sigma1,Sigma.2=Sigma2,debug=FALSE,V0=Sigma1,Xhat0=Sal[1],n.ahead=1,skip=0,verbose=TRUE)
matlines(kalman43$pred[,1]+sqrt(kalman43$Sigma.yy.pred[])%*%cbind(0,-1.96,1.96),col="seagreen",lty=c(1,2,2), lwd=1)
matlines(kalman43$pred[,1]+sqrt(kalman43$Sigma.yy.pred[,,])%*%cbind(0,-1.96,1.96),col="seagreen",lty=c(1,2,2), lwd=1)
#1. Plot prediction along the data include 95% PI.
plot(Days,Sal,type="p",,col="red",xlab="Time (day)",ylab="Water Salinity [PSU] = [g/kg]")
matlines(kalman43$pred[,1]+sqrt(kalman43$Sigma.yy.pred[1,1,])%*%cbind(0,-1.96,1.96),col="seagreen",lty=c(1,2,2), lwd=1)
kalman43 <- kalman2(Sal,A=A,B=B,u=NULL,C=C,Sigma.1=Sigma1,Sigma.2=Sigma2,debug=FALSE,V0=Sigma1,Xhat0=Sal[1],n.ahead=1,skip=0,verbose=TRUE)
#1. Plot prediction along the data include 95% PI.
plot(Days,Sal,type="p",,col="red",xlab="Time (day)",ylab="Water Salinity [PSU] = [g/kg]")
matlines(kalman43$pred[,1]+sqrt(kalman43$Sigma.yy.pred[1,1,])%*%cbind(0,-1.96,1.96),col="seagreen",lty=c(1,2,2), lwd=1)
legend("bottomright",legend=c("Observations","1-step prediciions"),col=c("tomato","seagreen"),pch=c(20,NA),bty='n',lty=c(NA,1))
#Question 4.3 Pure filter.
source("kalman.R")
kalman43 <- kalman2(Sal,A=A,B=B,u=NULL,C=C,Sigma.1=Sigma1,Sigma.2=Sigma2,debug=FALSE,V0=Sigma1,Xhat0=Sal[1],n.ahead=1,skip=0,verbose=TRUE)
#1. Plot prediction along the data include 95% PI.
plot(Days,Sal,type="p",,col="red",xlab="Time (day)",ylab="Water Salinity [PSU] = [g/kg]")
matlines(kalman43$pred[,1]+sqrt(kalman43$Sigma.yy.pred[1,1,])%*%cbind(0,-1.96,1.96),col="seagreen",lty=c(1,2,2), lwd=1)
#Question 4.3 Pure filter.
source("kalman.R")
kalman43 <- kalman2(Sal,A=A,B=B,u=NULL,C=C,Sigma.1=Sigma1,Sigma.2=Sigma2,debug=FALSE,V0=Sigma1,Xhat0=Sal[1],n.ahead=1,skip=0,verbose=TRUE)
#1. Plot prediction along the data include 95% PI.
plot(Days,Sal,type="p",,col="red",xlab="Time (day)",ylab="Water Salinity [PSU] = [g/kg]")
kalman43$pred[,1]
matlines(kalman43$rec[,1]+sqrt(kalman43$Sigma.yy.pred[1,1,])%*%cbind(0,-1.96,1.96),col="seagreen",lty=c(1,2,2), lwd=1)
matlines(kalman43$pred[,1]+sqrt(kalman43$Sigma.yy.pred[1,1,])%*%cbind(0,-1.96,1.96),col="seagreen",lty=c(1,2,2), lwd=1)
#Question 4.3 Pure filter.
source("kalman.R")
kalman43 <- kalman2(Sal,A=A,B=B,u=NULL,C=C,Sigma.1=Sigma1,Sigma.2=Sigma2,debug=FALSE,V0=Sigma1,Xhat0=Sal[1],n.ahead=1,skip=0,verbose=TRUE)
#1. Plot prediction along the data include 95% PI.
plot(Days,Sal,type="p",,col="red",xlab="Time (day)",ylab="Water Salinity [PSU] = [g/kg]")
matlines(kalman43$pred[,1]+sqrt(kalman43$Sigma.yy.pred[1,1,])%*%cbind(0,-1.96,1.96),col="seagreen",lty=c(1,2,2), lwd=1)
